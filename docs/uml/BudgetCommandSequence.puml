@startuml

hide footbox

 -> ":BudgetCommand":

activate ":BudgetCommand"
":BudgetCommand" -> ":BudgetCommand": execute(data, ui)
activate  ":BudgetCommand"
":BudgetCommand" -> ":data": getBudgets()
activate ":data"
return budgetList: ArrayList<Budget>
deactivate ":data"



":BudgetCommand" -> ":data": getExpenses()
activate ":data"
return expenses: ArrayList<Expense>

":BudgetCommand" -> ":BudgetAction" : budgetList,ui
activate ":BudgetAction"
":BudgetAction" -> ":BudgetCommand" : budgetAction :BudgetAction
deactivate ":BudgetAction"


alt actions is add
":BudgetCommand" -> ":BudgetCommand": executeAddBudget(budgetAction, requiredParams);
activate ":BudgetCommand"
":BudgetCommand" -> ":BudgetAction" : budgetName, budgetLimit
activate ":BudgetAction"
":BudgetAction" -> ":BudgetAction" : addBudget(budgetName, budgetLimit)
activate ":BudgetAction"

return
return

deactivate ":BudgetCommand"

else actions is set

":BudgetCommand" -> ":BudgetCommand": executeSetBudget(budgetAction, requiredParams)
activate ":BudgetCommand"
":BudgetCommand" -> ":BudgetAction" : budgetName, budgetLimit
activate ":BudgetAction"
":BudgetAction" -> ":BudgetAction" : setBudget(budgetName, budgetLimit)
activate ":BudgetAction"

return
return



deactivate ":BudgetCommand"

else actions is del
":BudgetCommand" -> ":BudgetCommand": executeDelBudget(budgetAction, requiredParams, expenses)
activate ":BudgetCommand"
":BudgetCommand" -> ":BudgetAction" : budgetName, budgetLimit
activate ":BudgetAction"
":BudgetAction" -> ":BudgetAction" : deleteBudget(budgetName, expenses)
activate ":BudgetAction"
return
return

deactivate ":BudgetCommand"

else actions is list
":BudgetCommand" -> ":BudgetCommand": executeListBudget(budgetAction, optionalParams, expenses)
activate ":BudgetCommand"

":BudgetCommand" -> ":LocalDate":
activate ":LocalDate"
":LocalDate" -> ":LocalDate": getMonthValue()
activate ":LocalDate"
return month: Integer
return month


":BudgetCommand" -> ":LocalDate":
activate ":LocalDate"
":LocalDate" -> ":LocalDate": getYear()
activate ":LocalDate"
return year: Integer
return year

":BudgetCommand" -> ":BudgetAction" : month, year, expenses
activate ":BudgetAction"
":BudgetAction" -> ":BudgetAction" : printBudgets(month, year, expenses)
activate ":BudgetAction"
return
return

deactivate ":BudgetCommand"

else actions is help
":BudgetCommand" -> ":BudgetCommand": executeBudgetHelp(budgetAction)
activate ":BudgetCommand"
":BudgetCommand" -> ":BudgetAction"
activate ":BudgetAction"
":BudgetAction" -> ":BudgetAction" : budgetHelp()
activate ":BudgetAction"
return
return

deactivate ":BudgetCommand"
end

":BudgetCommand" -> ":data": exportData()
activate ":data"
return
deactivate ":data"
destroy ":data"

deactivate ":data"
deactivate ":BudgetCommand"

@enduml